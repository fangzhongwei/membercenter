/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.memberber.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftService, ThriftStruct,
  ThriftStructCodec, ThriftStructCodec3,
  ThriftStructFieldInfo, ThriftResponse, ThriftUtil, ToThriftService}
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.thrift.{Protocols, ThriftClientRequest, ThriftServiceIface}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait MemberEndpoint[+MM[_]] extends ThriftService {
  
  def register(traceId: String, mobileTicket: String): MM[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]
  
  def getMemberById(traceId: String, memberId: Long): MM[com.jxjxgo.memberber.rpc.domain.MemberResponse]
  
  def getMemberByMobile(traceId: String, mobileTicket: String): MM[com.jxjxgo.memberber.rpc.domain.MemberResponse]
  
  def updateMemberStatus(traceId: String, memberId: Long, status: Int): MM[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]
  
  def updateNickName(traceId: String, memberId: Long, nickName: String): MM[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]
}



object MemberEndpoint { self =>

  case class ServiceIface(
      register : com.twitter.finagle.Service[self.Register.Args, self.Register.Result],
      getMemberById : com.twitter.finagle.Service[self.GetMemberById.Args, self.GetMemberById.Result],
      getMemberByMobile : com.twitter.finagle.Service[self.GetMemberByMobile.Args, self.GetMemberByMobile.Result],
      updateMemberStatus : com.twitter.finagle.Service[self.UpdateMemberStatus.Args, self.UpdateMemberStatus.Result],
      updateNickName : com.twitter.finagle.Service[self.UpdateNickName.Args, self.UpdateNickName.Result]
  ) extends BaseServiceIface

  // This is needed to support service inheritance.
  trait BaseServiceIface extends ToThriftService {
    def register : com.twitter.finagle.Service[self.Register.Args, self.Register.Result]
    def getMemberById : com.twitter.finagle.Service[self.GetMemberById.Args, self.GetMemberById.Result]
    def getMemberByMobile : com.twitter.finagle.Service[self.GetMemberByMobile.Args, self.GetMemberByMobile.Result]
    def updateMemberStatus : com.twitter.finagle.Service[self.UpdateMemberStatus.Args, self.UpdateMemberStatus.Result]
    def updateNickName : com.twitter.finagle.Service[self.UpdateNickName.Args, self.UpdateNickName.Result]

    override def toThriftService: ThriftService = new MethodIface(this)
  }

  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        pf: TProtocolFactory = Protocols.binaryFactory(),
        stats: com.twitter.finagle.stats.StatsReceiver
      ): ServiceIface =
        new ServiceIface(
          register = ThriftServiceIface(self.Register, binaryService, pf, stats),
          getMemberById = ThriftServiceIface(self.GetMemberById, binaryService, pf, stats),
          getMemberByMobile = ThriftServiceIface(self.GetMemberByMobile, binaryService, pf, stats),
          updateMemberStatus = ThriftServiceIface(self.UpdateMemberStatus, binaryService, pf, stats),
          updateNickName = ThriftServiceIface(self.UpdateNickName, binaryService, pf, stats)
      )
  }

  class MethodIface(serviceIface: BaseServiceIface)
    extends MemberEndpoint[Future] {
    private[this] val __register_service =
      ThriftServiceIface.resultFilter(self.Register) andThen serviceIface.register
    def register(traceId: String, mobileTicket: String): Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] =
      __register_service(self.Register.Args(traceId, mobileTicket))
    private[this] val __getMemberById_service =
      ThriftServiceIface.resultFilter(self.GetMemberById) andThen serviceIface.getMemberById
    def getMemberById(traceId: String, memberId: Long): Future[com.jxjxgo.memberber.rpc.domain.MemberResponse] =
      __getMemberById_service(self.GetMemberById.Args(traceId, memberId))
    private[this] val __getMemberByMobile_service =
      ThriftServiceIface.resultFilter(self.GetMemberByMobile) andThen serviceIface.getMemberByMobile
    def getMemberByMobile(traceId: String, mobileTicket: String): Future[com.jxjxgo.memberber.rpc.domain.MemberResponse] =
      __getMemberByMobile_service(self.GetMemberByMobile.Args(traceId, mobileTicket))
    private[this] val __updateMemberStatus_service =
      ThriftServiceIface.resultFilter(self.UpdateMemberStatus) andThen serviceIface.updateMemberStatus
    def updateMemberStatus(traceId: String, memberId: Long, status: Int): Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] =
      __updateMemberStatus_service(self.UpdateMemberStatus.Args(traceId, memberId, status))
    private[this] val __updateNickName_service =
      ThriftServiceIface.resultFilter(self.UpdateNickName) andThen serviceIface.updateNickName
    def updateNickName(traceId: String, memberId: Long, nickName: String): Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] =
      __updateNickName_service(self.UpdateNickName.Args(traceId, memberId, nickName))
  }

  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, MemberEndpoint[Future]] {
    def newMethodIface(serviceIface: ServiceIface): MemberEndpoint[Future] =
      new MethodIface(serviceIface)
  }

  object Register extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("register_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val MobileTicketField = new TField("mobileTicket", TType.STRING, 2)
      val MobileTicketFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          MobileTicketField,
          false,
          false,
          MobileTicketFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          mobileTicket =
            {
              val field = original.mobileTicket
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var mobileTicket: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    mobileTicket = readMobileTicketValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'mobileTicket' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          mobileTicket,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        mobileTicket: String
      ): Args =
        new Args(
          traceId,
          mobileTicket
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, String]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readMobileTicketValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeMobileTicketField(mobileTicket_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(MobileTicketField)
        writeMobileTicketValue(mobileTicket_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeMobileTicketValue(mobileTicket_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(mobileTicket_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val mobileTicket: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, String]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        mobileTicket: String
      ) = this(
        traceId,
        mobileTicket,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = mobileTicket
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        if (mobileTicket ne null) writeMobileTicketField(mobileTicket, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        mobileTicket: String = this.mobileTicket,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          mobileTicket,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.mobileTicket
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.memberber.rpc.domain.MemberBaseResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("register_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.memberber.rpc.domain.MemberBaseResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.memberber.rpc.domain.MemberBaseResponse = {
        com.jxjxgo.memberber.rpc.domain.MemberBaseResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.memberber.rpc.domain.MemberBaseResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.memberber.rpc.domain.MemberBaseResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "register"
    val serviceName = "MemberEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val register$args = Register.Args
  type register$args = Register.Args

  val register$result = Register.Result
  type register$result = Register.Result

  object GetMemberById extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getMemberById_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val MemberIdField = new TField("memberId", TType.I64, 2)
      val MemberIdFieldManifest = implicitly[Manifest[Long]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          MemberIdField,
          false,
          false,
          MemberIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          memberId =
            {
              val field = original.memberId
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var memberId: Long = 0L
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I64 =>
                    memberId = readMemberIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          memberId,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        memberId: Long
      ): Args =
        new Args(
          traceId,
          memberId
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, Long]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(MemberIdField)
        writeMemberIdValue(memberId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(memberId_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val memberId: Long,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, Long]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        memberId: Long
      ) = this(
        traceId,
        memberId,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = memberId
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        writeMemberIdField(memberId, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        memberId: Long = this.memberId,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          memberId,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.memberId
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.memberber.rpc.domain.MemberResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getMemberById_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.memberber.rpc.domain.MemberResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.memberber.rpc.domain.MemberResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.memberber.rpc.domain.MemberResponse = {
        com.jxjxgo.memberber.rpc.domain.MemberResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.memberber.rpc.domain.MemberResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.memberber.rpc.domain.MemberResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.memberber.rpc.domain.MemberResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.memberber.rpc.domain.MemberResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.memberber.rpc.domain.MemberResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "getMemberById"
    val serviceName = "MemberEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getMemberById$args = GetMemberById.Args
  type getMemberById$args = GetMemberById.Args

  val getMemberById$result = GetMemberById.Result
  type getMemberById$result = GetMemberById.Result

  object GetMemberByMobile extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getMemberByMobile_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val MobileTicketField = new TField("mobileTicket", TType.STRING, 2)
      val MobileTicketFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          MobileTicketField,
          false,
          false,
          MobileTicketFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          mobileTicket =
            {
              val field = original.mobileTicket
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var mobileTicket: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    mobileTicket = readMobileTicketValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'mobileTicket' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          mobileTicket,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        mobileTicket: String
      ): Args =
        new Args(
          traceId,
          mobileTicket
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, String]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readMobileTicketValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeMobileTicketField(mobileTicket_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(MobileTicketField)
        writeMobileTicketValue(mobileTicket_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeMobileTicketValue(mobileTicket_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(mobileTicket_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val mobileTicket: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, String]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        mobileTicket: String
      ) = this(
        traceId,
        mobileTicket,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = mobileTicket
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        if (mobileTicket ne null) writeMobileTicketField(mobileTicket, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        mobileTicket: String = this.mobileTicket,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          mobileTicket,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.mobileTicket
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.memberber.rpc.domain.MemberResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getMemberByMobile_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.memberber.rpc.domain.MemberResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.memberber.rpc.domain.MemberResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.memberber.rpc.domain.MemberResponse = {
        com.jxjxgo.memberber.rpc.domain.MemberResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.memberber.rpc.domain.MemberResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.memberber.rpc.domain.MemberResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.memberber.rpc.domain.MemberResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.memberber.rpc.domain.MemberResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.memberber.rpc.domain.MemberResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "getMemberByMobile"
    val serviceName = "MemberEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getMemberByMobile$args = GetMemberByMobile.Args
  type getMemberByMobile$args = GetMemberByMobile.Args

  val getMemberByMobile$result = GetMemberByMobile.Result
  type getMemberByMobile$result = GetMemberByMobile.Result

  object UpdateMemberStatus extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("updateMemberStatus_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val MemberIdField = new TField("memberId", TType.I64, 2)
      val MemberIdFieldManifest = implicitly[Manifest[Long]]
      val StatusField = new TField("status", TType.I32, 3)
      val StatusFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          MemberIdField,
          false,
          false,
          MemberIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          StatusField,
          false,
          false,
          StatusFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          memberId =
            {
              val field = original.memberId
              field
            },
          status =
            {
              val field = original.status
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var memberId: Long = 0L
        var status: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I64 =>
                    memberId = readMemberIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I32 =>
                    status = readStatusValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          memberId,
          status,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        memberId: Long,
        status: Int
      ): Args =
        new Args(
          traceId,
          memberId,
          status
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product3[String, Long, Int]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(MemberIdField)
        writeMemberIdValue(memberId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(memberId_item)
      }
    
      @inline private def readStatusValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeStatusField(status_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StatusField)
        writeStatusValue(status_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStatusValue(status_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(status_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val memberId: Long,
        val status: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product3[String, Long, Int]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        memberId: Long,
        status: Int
      ) = this(
        traceId,
        memberId,
        status,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = memberId
      def _3 = status
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        writeMemberIdField(memberId, _oprot)
        writeStatusField(status, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        memberId: Long = this.memberId,
        status: Int = this.status,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          memberId,
          status,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 3
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.memberId
        case 2 => this.status
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.memberber.rpc.domain.MemberBaseResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("updateMemberStatus_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.memberber.rpc.domain.MemberBaseResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.memberber.rpc.domain.MemberBaseResponse = {
        com.jxjxgo.memberber.rpc.domain.MemberBaseResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.memberber.rpc.domain.MemberBaseResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.memberber.rpc.domain.MemberBaseResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "updateMemberStatus"
    val serviceName = "MemberEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val updateMemberStatus$args = UpdateMemberStatus.Args
  type updateMemberStatus$args = UpdateMemberStatus.Args

  val updateMemberStatus$result = UpdateMemberStatus.Result
  type updateMemberStatus$result = UpdateMemberStatus.Result

  object UpdateNickName extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("updateNickName_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val MemberIdField = new TField("memberId", TType.I64, 2)
      val MemberIdFieldManifest = implicitly[Manifest[Long]]
      val NickNameField = new TField("nickName", TType.STRING, 3)
      val NickNameFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          MemberIdField,
          false,
          false,
          MemberIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          NickNameField,
          false,
          false,
          NickNameFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          memberId =
            {
              val field = original.memberId
              field
            },
          nickName =
            {
              val field = original.nickName
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var memberId: Long = 0L
        var nickName: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I64 =>
                    memberId = readMemberIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.STRING =>
                    nickName = readNickNameValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'nickName' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          memberId,
          nickName,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        memberId: Long,
        nickName: String
      ): Args =
        new Args(
          traceId,
          memberId,
          nickName
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product3[String, Long, String]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(MemberIdField)
        writeMemberIdValue(memberId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(memberId_item)
      }
    
      @inline private def readNickNameValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeNickNameField(nickName_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(NickNameField)
        writeNickNameValue(nickName_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeNickNameValue(nickName_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(nickName_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val memberId: Long,
        val nickName: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product3[String, Long, String]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        memberId: Long,
        nickName: String
      ) = this(
        traceId,
        memberId,
        nickName,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = memberId
      def _3 = nickName
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        writeMemberIdField(memberId, _oprot)
        if (nickName ne null) writeNickNameField(nickName, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        memberId: Long = this.memberId,
        nickName: String = this.nickName,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          memberId,
          nickName,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 3
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.memberId
        case 2 => this.nickName
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.memberber.rpc.domain.MemberBaseResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("updateNickName_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.memberber.rpc.domain.MemberBaseResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.memberber.rpc.domain.MemberBaseResponse = {
        com.jxjxgo.memberber.rpc.domain.MemberBaseResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.memberber.rpc.domain.MemberBaseResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.memberber.rpc.domain.MemberBaseResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "updateNickName"
    val serviceName = "MemberEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val updateNickName$args = UpdateNickName.Args
  type updateNickName$args = UpdateNickName.Args

  val updateNickName$result = UpdateNickName.Result
  type updateNickName$result = UpdateNickName.Result


  trait FutureIface extends MemberEndpoint[Future] {
    
    def register(traceId: String, mobileTicket: String): Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]
    
    def getMemberById(traceId: String, memberId: Long): Future[com.jxjxgo.memberber.rpc.domain.MemberResponse]
    
    def getMemberByMobile(traceId: String, mobileTicket: String): Future[com.jxjxgo.memberber.rpc.domain.MemberResponse]
    
    def updateMemberStatus(traceId: String, memberId: Long, status: Int): Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]
    
    def updateNickName(traceId: String, memberId: Long, nickName: String): Future[com.jxjxgo.memberber.rpc.domain.MemberBaseResponse]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "MemberEndpoint",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default)
    extends MemberEndpoint$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats,
      responseClassifier)
    with FutureIface {

    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(service, protocolFactory, serviceName, stats, ctfs.ResponseClassifier.Default)
  }

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends MemberEndpoint$FinagleService(
      iface,
      protocolFactory)
}