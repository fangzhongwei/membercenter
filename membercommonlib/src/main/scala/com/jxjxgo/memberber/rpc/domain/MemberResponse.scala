/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.memberber.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object MemberResponse extends ThriftStructCodec3[MemberResponse] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("MemberResponse")
  val CodeField = new TField("code", TType.STRING, 1)
  val CodeFieldManifest = implicitly[Manifest[String]]
  val MemberIdField = new TField("memberId", TType.I64, 2)
  val MemberIdFieldManifest = implicitly[Manifest[Long]]
  val MobileField = new TField("mobile", TType.STRING, 3)
  val MobileFieldManifest = implicitly[Manifest[String]]
  val MobileTicketField = new TField("mobileTicket", TType.STRING, 4)
  val MobileTicketFieldManifest = implicitly[Manifest[String]]
  val StatusField = new TField("status", TType.I32, 5)
  val StatusFieldManifest = implicitly[Manifest[Int]]
  val NickNameField = new TField("nickName", TType.STRING, 6)
  val NickNameFieldManifest = implicitly[Manifest[String]]
  val PasswordField = new TField("password", TType.STRING, 7)
  val PasswordFieldManifest = implicitly[Manifest[String]]
  val GmtCreateField = new TField("gmtCreate", TType.I64, 8)
  val GmtCreateFieldManifest = implicitly[Manifest[Long]]
  val GmtUpdateField = new TField("gmtUpdate", TType.I64, 9)
  val GmtUpdateFieldManifest = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      CodeField,
      false,
      false,
      CodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MemberIdField,
      false,
      false,
      MemberIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MobileField,
      false,
      false,
      MobileFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MobileTicketField,
      false,
      false,
      MobileTicketFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      StatusField,
      false,
      false,
      StatusFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      NickNameField,
      false,
      false,
      NickNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      PasswordField,
      false,
      false,
      PasswordFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      GmtCreateField,
      false,
      false,
      GmtCreateFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      GmtUpdateField,
      false,
      false,
      GmtUpdateFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: MemberResponse): Unit = {
  }

  def withoutPassthroughFields(original: MemberResponse): MemberResponse =
    new Immutable(
      code =
        {
          val field = original.code
          field
        },
      memberId =
        {
          val field = original.memberId
          field
        },
      mobile =
        {
          val field = original.mobile
          field
        },
      mobileTicket =
        {
          val field = original.mobileTicket
          field
        },
      status =
        {
          val field = original.status
          field
        },
      nickName =
        {
          val field = original.nickName
          field
        },
      password =
        {
          val field = original.password
          field
        },
      gmtCreate =
        {
          val field = original.gmtCreate
          field
        },
      gmtUpdate =
        {
          val field = original.gmtUpdate
          field
        }
    )

  override def encode(_item: MemberResponse, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): MemberResponse = {

    var codeOffset: Int = -1
    var memberId: Long = 0L
    var mobileOffset: Int = -1
    var mobileTicketOffset: Int = -1
    var status: Int = 0
    var nickNameOffset: Int = -1
    var passwordOffset: Int = -1
    var gmtCreate: Long = 0L
    var gmtUpdate: Long = 0L

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                codeOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I64 =>
    
                memberId = readMemberIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                mobileOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'mobile' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                mobileTicketOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'mobileTicket' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
    
                status = readStatusValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                nickNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'nickName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                passwordOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'password' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I64 =>
    
                gmtCreate = readGmtCreateValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'gmtCreate' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I64 =>
    
                gmtUpdate = readGmtUpdateValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'gmtUpdate' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      codeOffset,
      memberId,
      mobileOffset,
      mobileTicketOffset,
      status,
      nickNameOffset,
      passwordOffset,
      gmtCreate,
      gmtUpdate,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): MemberResponse =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): MemberResponse = {
    var code: String = "0"
    var memberId: Long = 0L
    var mobile: String = ""
    var mobileTicket: String = ""
    var status: Int = 0
    var nickName: String = ""
    var password: String = ""
    var gmtCreate: Long = 0L
    var gmtUpdate: Long = 0L
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                code = readCodeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I64 =>
                memberId = readMemberIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                mobile = readMobileValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'mobile' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                mobileTicket = readMobileTicketValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'mobileTicket' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
                status = readStatusValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                nickName = readNickNameValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'nickName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                password = readPasswordValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'password' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I64 =>
                gmtCreate = readGmtCreateValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'gmtCreate' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I64 =>
                gmtUpdate = readGmtUpdateValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'gmtUpdate' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      code,
      memberId,
      mobile,
      mobileTicket,
      status,
      nickName,
      password,
      gmtCreate,
      gmtUpdate,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    code: String = "0",
    memberId: Long = 0L,
    mobile: String = "",
    mobileTicket: String = "",
    status: Int = 0,
    nickName: String = "",
    password: String = "",
    gmtCreate: Long = 0L,
    gmtUpdate: Long = 0L
  ): MemberResponse =
    new Immutable(
      code,
      memberId,
      mobile,
      mobileTicket,
      status,
      nickName,
      password,
      gmtCreate,
      gmtUpdate
    )

  def unapply(_item: MemberResponse): _root_.scala.Option[scala.Product9[String, Long, String, String, Int, String, String, Long, Long]] = _root_.scala.Some(_item)


  @inline private def readCodeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeCodeField(code_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CodeField)
    writeCodeValue(code_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCodeValue(code_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(code_item)
  }

  @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MemberIdField)
    writeMemberIdValue(memberId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(memberId_item)
  }

  @inline private def readMobileValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeMobileField(mobile_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MobileField)
    writeMobileValue(mobile_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMobileValue(mobile_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(mobile_item)
  }

  @inline private def readMobileTicketValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeMobileTicketField(mobileTicket_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MobileTicketField)
    writeMobileTicketValue(mobileTicket_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMobileTicketValue(mobileTicket_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(mobileTicket_item)
  }

  @inline private def readStatusValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeStatusField(status_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatusField)
    writeStatusValue(status_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatusValue(status_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(status_item)
  }

  @inline private def readNickNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNickNameField(nickName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NickNameField)
    writeNickNameValue(nickName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNickNameValue(nickName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(nickName_item)
  }

  @inline private def readPasswordValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writePasswordField(password_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PasswordField)
    writePasswordValue(password_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePasswordValue(password_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(password_item)
  }

  @inline private def readGmtCreateValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeGmtCreateField(gmtCreate_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(GmtCreateField)
    writeGmtCreateValue(gmtCreate_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeGmtCreateValue(gmtCreate_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(gmtCreate_item)
  }

  @inline private def readGmtUpdateValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeGmtUpdateField(gmtUpdate_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(GmtUpdateField)
    writeGmtUpdateValue(gmtUpdate_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeGmtUpdateValue(gmtUpdate_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(gmtUpdate_item)
  }


  object Immutable extends ThriftStructCodec3[MemberResponse] {
    override def encode(_item: MemberResponse, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): MemberResponse = MemberResponse.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[MemberResponse] = MemberResponse.metaData
  }

  /**
   * The default read-only implementation of MemberResponse.  You typically should not need to
   * directly reference this class; instead, use the MemberResponse.apply method to construct
   * new instances.
   */
  class Immutable(
      val code: String,
      val memberId: Long,
      val mobile: String,
      val mobileTicket: String,
      val status: Int,
      val nickName: String,
      val password: String,
      val gmtCreate: Long,
      val gmtUpdate: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends MemberResponse {
    def this(
      code: String = "0",
      memberId: Long = 0L,
      mobile: String = "",
      mobileTicket: String = "",
      status: Int = 0,
      nickName: String = "",
      password: String = "",
      gmtCreate: Long = 0L,
      gmtUpdate: Long = 0L
    ) = this(
      code,
      memberId,
      mobile,
      mobileTicket,
      status,
      nickName,
      password,
      gmtCreate,
      gmtUpdate,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      codeOffset: Int,
      val memberId: Long,
      mobileOffset: Int,
      mobileTicketOffset: Int,
      val status: Int,
      nickNameOffset: Int,
      passwordOffset: Int,
      val gmtCreate: Long,
      val gmtUpdate: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends MemberResponse {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val code: String =
      if (codeOffset == -1)
        "0"
      else {
        _proto.decodeString(_buf, codeOffset)
      }
    lazy val mobile: String =
      if (mobileOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, mobileOffset)
      }
    lazy val mobileTicket: String =
      if (mobileTicketOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, mobileTicketOffset)
      }
    lazy val nickName: String =
      if (nickNameOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, nickNameOffset)
      }
    lazy val password: String =
      if (passwordOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, passwordOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the MemberResponse trait with additional state or
   * behavior and implement the read-only methods from MemberResponse using an underlying
   * instance.
   */
  trait Proxy extends MemberResponse {
    protected def _underlying_MemberResponse: MemberResponse
    override def code: String = _underlying_MemberResponse.code
    override def memberId: Long = _underlying_MemberResponse.memberId
    override def mobile: String = _underlying_MemberResponse.mobile
    override def mobileTicket: String = _underlying_MemberResponse.mobileTicket
    override def status: Int = _underlying_MemberResponse.status
    override def nickName: String = _underlying_MemberResponse.nickName
    override def password: String = _underlying_MemberResponse.password
    override def gmtCreate: Long = _underlying_MemberResponse.gmtCreate
    override def gmtUpdate: Long = _underlying_MemberResponse.gmtUpdate
    override def _passthroughFields = _underlying_MemberResponse._passthroughFields
  }
}

trait MemberResponse
  extends ThriftStruct
  with scala.Product9[String, Long, String, String, Int, String, String, Long, Long]
  with java.io.Serializable
{
  import MemberResponse._

  def code: String
  def memberId: Long
  def mobile: String
  def mobileTicket: String
  def status: Int
  def nickName: String
  def password: String
  def gmtCreate: Long
  def gmtUpdate: Long

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = code
  def _2 = memberId
  def _3 = mobile
  def _4 = mobileTicket
  def _5 = status
  def _6 = nickName
  def _7 = password
  def _8 = gmtCreate
  def _9 = gmtUpdate


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (code ne null) {
                writeCodeValue(code, _oprot)
                _root_.scala.Some(MemberResponse.CodeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeMemberIdValue(memberId, _oprot)
                _root_.scala.Some(MemberResponse.MemberIdField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (mobile ne null) {
                writeMobileValue(mobile, _oprot)
                _root_.scala.Some(MemberResponse.MobileField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (mobileTicket ne null) {
                writeMobileTicketValue(mobileTicket, _oprot)
                _root_.scala.Some(MemberResponse.MobileTicketField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeStatusValue(status, _oprot)
                _root_.scala.Some(MemberResponse.StatusField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (nickName ne null) {
                writeNickNameValue(nickName, _oprot)
                _root_.scala.Some(MemberResponse.NickNameField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (password ne null) {
                writePasswordValue(password, _oprot)
                _root_.scala.Some(MemberResponse.PasswordField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (true) {
                writeGmtCreateValue(gmtCreate, _oprot)
                _root_.scala.Some(MemberResponse.GmtCreateField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (true) {
                writeGmtUpdateValue(gmtUpdate, _oprot)
                _root_.scala.Some(MemberResponse.GmtUpdateField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): MemberResponse = {
    var code: String = this.code
    var memberId: Long = this.memberId
    var mobile: String = this.mobile
    var mobileTicket: String = this.mobileTicket
    var status: Int = this.status
    var nickName: String = this.nickName
    var password: String = this.password
    var gmtCreate: Long = this.gmtCreate
    var gmtUpdate: Long = this.gmtUpdate
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        code = readCodeValue(_blob.read)
      case 2 =>
        memberId = readMemberIdValue(_blob.read)
      case 3 =>
        mobile = readMobileValue(_blob.read)
      case 4 =>
        mobileTicket = readMobileTicketValue(_blob.read)
      case 5 =>
        status = readStatusValue(_blob.read)
      case 6 =>
        nickName = readNickNameValue(_blob.read)
      case 7 =>
        password = readPasswordValue(_blob.read)
      case 8 =>
        gmtCreate = readGmtCreateValue(_blob.read)
      case 9 =>
        gmtUpdate = readGmtUpdateValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      code,
      memberId,
      mobile,
      mobileTicket,
      status,
      nickName,
      password,
      gmtCreate,
      gmtUpdate,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): MemberResponse = {
    var code: String = this.code
    var memberId: Long = this.memberId
    var mobile: String = this.mobile
    var mobileTicket: String = this.mobileTicket
    var status: Int = this.status
    var nickName: String = this.nickName
    var password: String = this.password
    var gmtCreate: Long = this.gmtCreate
    var gmtUpdate: Long = this.gmtUpdate

    _fieldId match {
      case 1 =>
        code = "0"
      case 2 =>
        memberId = 0L
      case 3 =>
        mobile = ""
      case 4 =>
        mobileTicket = ""
      case 5 =>
        status = 0
      case 6 =>
        nickName = ""
      case 7 =>
        password = ""
      case 8 =>
        gmtCreate = 0L
      case 9 =>
        gmtUpdate = 0L
      case _ =>
    }
    new Immutable(
      code,
      memberId,
      mobile,
      mobileTicket,
      status,
      nickName,
      password,
      gmtCreate,
      gmtUpdate,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetCode: MemberResponse = unsetField(1)

  def unsetMemberId: MemberResponse = unsetField(2)

  def unsetMobile: MemberResponse = unsetField(3)

  def unsetMobileTicket: MemberResponse = unsetField(4)

  def unsetStatus: MemberResponse = unsetField(5)

  def unsetNickName: MemberResponse = unsetField(6)

  def unsetPassword: MemberResponse = unsetField(7)

  def unsetGmtCreate: MemberResponse = unsetField(8)

  def unsetGmtUpdate: MemberResponse = unsetField(9)


  override def write(_oprot: TProtocol): Unit = {
    MemberResponse.validate(this)
    _oprot.writeStructBegin(Struct)
    if (code ne null) writeCodeField(code, _oprot)
    writeMemberIdField(memberId, _oprot)
    if (mobile ne null) writeMobileField(mobile, _oprot)
    if (mobileTicket ne null) writeMobileTicketField(mobileTicket, _oprot)
    writeStatusField(status, _oprot)
    if (nickName ne null) writeNickNameField(nickName, _oprot)
    if (password ne null) writePasswordField(password, _oprot)
    writeGmtCreateField(gmtCreate, _oprot)
    writeGmtUpdateField(gmtUpdate, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    code: String = this.code,
    memberId: Long = this.memberId,
    mobile: String = this.mobile,
    mobileTicket: String = this.mobileTicket,
    status: Int = this.status,
    nickName: String = this.nickName,
    password: String = this.password,
    gmtCreate: Long = this.gmtCreate,
    gmtUpdate: Long = this.gmtUpdate,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): MemberResponse =
    new Immutable(
      code,
      memberId,
      mobile,
      mobileTicket,
      status,
      nickName,
      password,
      gmtCreate,
      gmtUpdate,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[MemberResponse]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[MemberResponse]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 9

  override def productElement(n: Int): Any = n match {
    case 0 => this.code
    case 1 => this.memberId
    case 2 => this.mobile
    case 3 => this.mobileTicket
    case 4 => this.status
    case 5 => this.nickName
    case 6 => this.password
    case 7 => this.gmtCreate
    case 8 => this.gmtUpdate
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "MemberResponse"
}